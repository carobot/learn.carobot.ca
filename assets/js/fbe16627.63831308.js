"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8064],{82729:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=t(74848),r=t(28453);const o={sidebar_position:8},s="Membrane Switch Module",l={id:"UNO-R4-Starter-Kit/Membrane-Switch-Module",title:"Membrane Switch Module",description:"This tutorial will help you learn how to use a membrane switch module. This makes user interface a lot easier!",source:"@site/docs/UNO-R4-Starter-Kit/Membrane-Switch-Module.md",sourceDirName:"UNO-R4-Starter-Kit",slug:"/UNO-R4-Starter-Kit/Membrane-Switch-Module",permalink:"/UNO-R4-Starter-Kit/Membrane-Switch-Module",draft:!1,unlisted:!1,editUrl:"https://github.com/carobot/learn.carobot.ca/tree/main/docs/UNO-R4-Starter-Kit/Membrane-Switch-Module.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Ultrasonic Sensor",permalink:"/UNO-R4-Starter-Kit/Ultrasonic-Sensor"},next:{title:"DHT11 Temperature and Humidity Sensor",permalink:"/UNO-R4-Starter-Kit/DHT11-Temp-and-Humidity-Sensor"}},c={},a=[{value:"Materials",id:"materials",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Connections",id:"connections",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"membrane-switch-module",children:"Membrane Switch Module"}),"\n",(0,i.jsx)(n.p,{children:"This tutorial will help you learn how to use a membrane switch module. This makes user interface a lot easier!"}),"\n",(0,i.jsx)(n.h2,{id:"materials",children:"Materials"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Image"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Breadboard"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/breadboard.webp",width:"200",height:"150"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Jumper wires"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/jumper-wires.webp",width:"200",height:"150"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Arduino Uno R4 Minima"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/arduino-r4-minima.webp",width:"190",height:"150"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Membrane Switch Module"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/membrane-switch.webp",width:"200",height:"200"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Make the following connections using the breadboard and jumper wires:"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"connections",children:"Connections"}),"\n",(0,i.jsx)(n.p,{children:"(Membrane Switch to Arduino R4)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Terminal 1 to pin 2"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 2 to pin 3"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 3 to pin 4"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 4 to pin 5"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 5 to pin 6"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 6 to pin 7"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 7 to pin 8"}),"\n",(0,i.jsx)(n.li,{children:"Terminal 8 to pin 9"}),"\n"]}),"\n",(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/membrane-switch.png",width:"350",height:"700"}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Paste the following code into your Arduino IDE:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"const byte ROWS = 4;\nconst byte COLS = 4;\n\n// Define the pins for rows and columns\nbyte rowPins[ROWS] = {9, 8, 7, 6};\nbyte colPins[COLS] = {5, 4, 3, 2};\n\nchar keys[ROWS][COLS] = {\n  {'1', '2', '3', 'A'},\n  {'4', '5', '6', 'B'},\n  {'7', '8', '9', 'C'},\n  {'*', '0', '#', 'D'}\n};\n\nvoid setup() {\n  Serial.begin(9600);\n  // Set row pins as INPUT_PULLUP\n  for (byte row = 0; row < ROWS; row++) {\n    pinMode(rowPins[row], INPUT_PULLUP);\n  }\n  // Set column pins as OUTPUT and HIGH\n  for (byte col = 0; col < COLS; col++) {\n    pinMode(colPins[col], OUTPUT);\n    digitalWrite(colPins[col], HIGH);\n  }\n}\n\nvoid loop() {\n  // Scan each column\n  for (byte col = 0; col < COLS; col++) {\n    digitalWrite(colPins[col], LOW);  // Set current column to LOW\n    delay(10);  // Delay for stability\n    // Scan each row in the current column\n    for (byte row = 0; row < ROWS; row++) {\n      if (digitalRead(rowPins[row]) == LOW) {\n        // Key pressed, print the corresponding key\n        Serial.print(\"Key pressed: \");\n        Serial.println(keys[row][col]);\n        delay(200);  // Delay for debounce\n      }\n    }\n    digitalWrite(colPins[col], HIGH);  // Set current column back to HIGH\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Upload the code to your arduino and run."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test! Observe the serial monitor as you press buttons into the membrane keypad."}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);