"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4086],{4124:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var o=t(74848),i=t(28453);const s={title:"Improvements and Further Development",sidebabr_position:3},a=void 0,r={id:"Teensy-Lightsaber/development",title:"Improvements and Further Development",description:"Issues Encountered",source:"@site/Projects/Teensy-Lightsaber/development.md",sourceDirName:"Teensy-Lightsaber",slug:"/Teensy-Lightsaber/development",permalink:"/Projects/Teensy-Lightsaber/development",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Improvements and Further Development",sidebabr_position:3},sidebar:"tutorialSidebar",previous:{title:"Building the Lightsaber",permalink:"/Projects/Teensy-Lightsaber/build"}},d={},l=[{value:"Issues Encountered",id:"issues-encountered",level:2},{value:"Sound and Animation Simultaneity",id:"sound-and-animation-simultaneity",level:4},{value:"Testing the Clash",id:"testing-the-clash",level:4},{value:"Future Development",id:"future-development",level:2},{value:"Additional sounds",id:"additional-sounds",level:4},{value:"Introduction of random elements",id:"introduction-of-random-elements",level:4}];function u(e){const n={h2:"h2",h4:"h4",p:"p",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"issues-encountered",children:"Issues Encountered"}),"\n",(0,o.jsx)(n.h4,{id:"sound-and-animation-simultaneity",children:"Sound and Animation Simultaneity"}),"\n",(0,o.jsx)(n.p,{children:"Due to the sequential nature of the program, I had some issues having the power up and\ndown sound effects playing alongside the corresponding animations. This was initially solved\nafter implementing a state machine and assigning states to different functions i.e. fade in,\nfade out, and transition. However, after the integration of the IMU to implement swing, clash,\nand twirl functions, the synchronization between the sound and animation was lost."}),"\n",(0,o.jsx)(n.h4,{id:"testing-the-clash",children:"Testing the Clash"}),"\n",(0,o.jsx)(n.p,{children:"Due to the physical state of my prototype, it was very difficult to test if the clash sound was\nfully functional. As a result there wasn\u2019t much testing done with regards to the clash function."}),"\n",(0,o.jsx)(n.h2,{id:"future-development",children:"Future Development"}),"\n",(0,o.jsx)(n.h4,{id:"additional-sounds",children:"Additional sounds"}),"\n",(0,o.jsx)(n.p,{children:"Initial Power on sound after boot. Probably a spoken line from one of the films."}),"\n",(0,o.jsx)(n.h4,{id:"introduction-of-random-elements",children:"Introduction of random elements"}),"\n",(0,o.jsx)(n.p,{children:"The Teensy 4.x series include two Random Number Generator protocols natively. Each are\ndesigned for encryption useages, but they could be applied to any number of other programs.\nWe envision using random numbers for one of these protocols into both the sound file\nplayback and the RGB colour definitions to add subtle error from the original values. This\ncould lead to an unstable or scintillating colour along the blade, and either more cacophanous\nor analog sounds from the file payback. Both of these features is purely aesthetic, and\nprovides and interesting code challenge without changing the core functionality of the project."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);