"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7885],{22111:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var r=n(74848),s=n(28453);const i={title:"Project 6.2: Two-way Data Communication - IMU Sensor to PC",sidebar_position:10},o=void 0,a={id:"ESP32 Starter Kit/Project-6.2",title:"Project 6.2: Two-way Data Communication - IMU Sensor to PC",description:"Overview:",source:"@site/Projects/ESP32 Starter Kit/Project-6.2.md",sourceDirName:"ESP32 Starter Kit",slug:"/ESP32 Starter Kit/Project-6.2",permalink:"/Projects/ESP32 Starter Kit/Project-6.2",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{title:"Project 6.2: Two-way Data Communication - IMU Sensor to PC",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Project 6.1: Two-way Data Communication - String Gauge to PC",permalink:"/Projects/ESP32 Starter Kit/Project-6.1"},next:{title:"Introduction to the Wifi Tool",permalink:"/Projects/ESP32 Wifi Tool/Introduction"}},d={},c=[{value:"Overview:",id:"overview",level:2},{value:"Materials:",id:"materials",level:2},{value:"Objectives:",id:"objectives",level:2},{value:"Computer:",id:"computer",level:3},{value:"ESP32:",id:"esp32",level:3},{value:"Hardware Assembly:",id:"hardware-assembly",level:2},{value:"Network Diagram:",id:"network-diagram",level:2},{value:"Pseudocode:",id:"pseudocode",level:2},{value:"ESP32:",id:"esp32-1",level:4},{value:"Client:",id:"client",level:4},{value:"Instructions:",id:"instructions",level:2},{value:"What you should see:",id:"what-you-should-see",level:4}];function l(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"overview",children:"Overview:"}),"\n",(0,r.jsx)(t.p,{children:"In Project 6.2, we build up from previous projects (Project 4) by implementing a system that supports bidirectional communication between a computer and an ESP32. This program not only allows the computer to receive data but also to send specific commands to request different types of data. By utilizing UDP protocol for network communication, this project involves the ESP32 sending sensor data based on requests and the computer dynamically displaying and logging this data to a separate file."}),"\n",(0,r.jsx)(t.h2,{id:"materials",children:"Materials:"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Component"}),(0,r.jsx)(t.th,{children:"Image"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://www.canadarobotix.com/products/5134",children:"10 DOF IMU Sensor"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/IMU.png",width:"200"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://www.canadarobotix.com/products/2594",children:"ESP32 Dev Board"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/ESP32.webp",width:"200"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://www.canadarobotix.com/products/3056",children:'1.8" TFT LCD Screen'})}),(0,r.jsx)(t.td,{children:(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/LCD-Screen.webp",width:"200"})})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"objectives",children:"Objectives:"}),"\n",(0,r.jsx)(t.h3,{id:"computer",children:"Computer:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"UDP protocol: Integrate the computer with UDP protocol as a client that is capable of sending and receiving packages"}),"\n",(0,r.jsx)(t.li,{children:"Command Handling: Implement a loop to continuously listen for user commands via the console and send those commands to the ESP32 to request specific a type of data (e.g., accelerometer, gyroscope or temperature data)."}),"\n",(0,r.jsx)(t.li,{children:"Data Retrieval and Logging: Log the received sensor data into a file for storing and display it in real-time on a console"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"esp32",children:"ESP32:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"UDP protocol: Integrate the ESP32 with UDP protocol as server that is capable of sending and receiving packages"}),"\n",(0,r.jsx)(t.li,{children:"C0mmand Handling: Implement a loop to continuously listen for computer commands via UDP network, then process those commands and send back the data that the computer wants"}),"\n",(0,r.jsx)(t.li,{children:"Data Display and Sending: Process sensor data to display it on the screen and send it the computer continuously"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"hardware-assembly",children:"Hardware Assembly:"}),"\n",(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/hardware-assembly-3.png",width:"700"}),"\n",(0,r.jsx)(t.h2,{id:"network-diagram",children:"Network Diagram:"}),"\n",(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/ESP32-17.png",width:"700"}),"\n",(0,r.jsx)(t.h2,{id:"pseudocode",children:"Pseudocode:"}),"\n",(0,r.jsx)(t.h4,{id:"esp32-1",children:"ESP32:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Include necessary libraries for networking, graphics, and sensors\r\nDefine constants and settings for WiFi, UDP, and sensor components\r\nSetup function:\r\n    Initialize serial and display settings\r\n    Configure WiFi as an access point and display IP details\r\n    Begin listening for UDP packets on a specified port\r\n    Initialize and configure the MPU6050 sensor\r\n    Create tasks for sending data, receiving data, and displaying data\r\nReceive Task:\r\n    Continuously check for and read incoming UDP packets\r\n    Parse received data to determine response type\r\nSend Task:\r\n    Continuously check response type and send appropriate sensor data via UDP\r\n    Handle and send data based on different types of data requests (acceleration, rotation,\r\n    temperature)\r\nDisplay Task:\r\n    Continuously update and display sensor data on the TFT screen\r\n    Display system and network status\r\nMain Loop:\r\n    Perform no operations, as all functionality is handled within tasks\n"})}),"\n",(0,r.jsx)(t.h4,{id:"client",children:"Client:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Include necessary libraries\r\nDefine constants and global variables\r\n    Define signal handling function to stop the program on SIGINT or SIGTSTP\r\n    Define main function:\r\n    Open log file for writing\r\n    If file opening fails, terminate the program\r\n    Configure client socket address structure\r\n    Configure server socket address structure\r\n    Convert and set server IP address\r\n    Create UDP socket\r\n    Set socket to non-blocking mode\r\n    Bind the socket to the client's address\r\n    Connect the socket to the server's address\r\n    Create a thread for sending data\r\n    Enter a loop that runs until the program is signaled to stop:\r\n    Wait for incoming data on the socket\r\n    If data is received, write it to the file\r\n    On loop exit, join the send thread and close the file and socket\r\nDefine send function for the thread:\r\n    Continuously read commands from the user\r\n    Send these commands to the server\r\n    If the user enters \"0\", stop the loop and exit the thread\n"})}),"\n",(0,r.jsx)(t.h2,{id:"instructions",children:"Instructions:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Download project6_2.ino"}),"\n",(0,r.jsx)(t.li,{children:"Change your ESP32 name and password for the access point if you want"}),"\n",(0,r.jsx)(t.li,{children:"Verify and upload project6_2.ino into the ESP32"}),"\n",(0,r.jsx)(t.li,{children:"Connect your computer to the ESP32 access point"}),"\n",(0,r.jsx)(t.li,{children:"Download client file from the folder"}),"\n",(0,r.jsx)(t.li,{children:"On your terminal, go to the client file and run:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"make clean all\r\n./client\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"7",children:["\n",(0,r.jsx)(t.li,{children:"Create a new terminal, go to the client file and run:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Tail -f log.txt\n"})}),"\n",(0,r.jsx)(t.h4,{id:"what-you-should-see",children:"What you should see:"}),"\n",(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/ESP32-18.png",width:"300"}),"\n",(0,r.jsx)("img",{src:"/img/docs/projects/esp32-starter-kit/ESP32-19.png",width:"700"})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);