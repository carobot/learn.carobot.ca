"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7850],{50963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=t(74848),l=t(28453);const o={sidebar_position:12},r="12. MAX7219 LED Matrix",s={id:"UNO-R4-Starter-Kit/MAX7219-LED-Matrix",title:"12. MAX7219 LED Matrix",description:"The MAX7219 is an integrated serial input/output common-cathode display driver that connects your microcontroller to a 8-digit 7-segment digital LED display or a 8x8 LED matrix. It is especially useful when you need to control a large number of LEDs with minimal pin usage. In this tutorial, we will learn how to set up and use the MAX7219 LED matrix module with an Arduino.",source:"@site/docs/UNO-R4-Starter-Kit/MAX7219-LED-Matrix.md",sourceDirName:"UNO-R4-Starter-Kit",slug:"/UNO-R4-Starter-Kit/MAX7219-LED-Matrix",permalink:"/UNO-R4-Starter-Kit/MAX7219-LED-Matrix",draft:!1,unlisted:!1,editUrl:"https://github.com/carobot/learn.carobot.ca/tree/main/docs/UNO-R4-Starter-Kit/MAX7219-LED-Matrix.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"11. IR Receiver Module",permalink:"/UNO-R4-Starter-Kit/IR-Receiver"},next:{title:"13. GY-521 Module",permalink:"/UNO-R4-Starter-Kit/GY-521-Module"}},a={},d=[{value:"Materials",id:"materials",level:2},{value:"Instructions",id:"instructions",level:2},{value:"Connections",id:"connections",level:4},{value:"Code",id:"code",level:4}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"12-max7219-led-matrix",children:"12. MAX7219 LED Matrix"}),"\n",(0,i.jsx)(n.p,{children:"The MAX7219 is an integrated serial input/output common-cathode display driver that connects your microcontroller to a 8-digit 7-segment digital LED display or a 8x8 LED matrix. It is especially useful when you need to control a large number of LEDs with minimal pin usage. In this tutorial, we will learn how to set up and use the MAX7219 LED matrix module with an Arduino."}),"\n",(0,i.jsx)(n.h2,{id:"materials",children:"Materials"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Image"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Breadboard"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/breadboard.webp",width:"200"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Jumper wires"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/jumper-wires.webp",width:"200"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Arduino Uno R4 Minima"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/arduino-r4-minima.webp",width:"200"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MAX7219 Module"}),(0,i.jsx)(n.td,{children:(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/MAX7219-Module.jpg",width:"200"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Make the following connections using the breadboard and jumper wires."}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"connections",children:"Connections"}),"\n",(0,i.jsx)(n.p,{children:"(MAX7219 to Arduino)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Vcc to 5V"}),"\n",(0,i.jsx)(n.li,{children:"GND to GND"}),"\n",(0,i.jsx)(n.li,{children:"DIN to pin 12"}),"\n",(0,i.jsx)(n.li,{children:"CS to pin 11"}),"\n",(0,i.jsx)(n.li,{children:"CLK to pin 10"}),"\n"]}),"\n",(0,i.jsx)("img",{src:"/img/docs/UNO-R4-Starter-Kit/MAX7219-Module.png",width:"600"}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Download the LedControl library from the Library Manager in the Arduino IDE."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Paste the following code into your main Arduino sketch:"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"code",children:"Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <LedControl.h>\n\nLedControl lc=LedControl(12,10,11,1);\n\n/* we always wait a bit between updates of the display */\nunsigned long delaytime1=500;\nunsigned long delaytime2=50;\nvoid setup() {\n  /*\n   The MAX72XX is in power-saving mode on startup,\n   we have to do a wakeup call\n   */\n  lc.shutdown(0,false);\n  /* Set the brightness to a medium values */\n  lc.setIntensity(0,8);\n  /* and clear the display */\n  lc.clearDisplay(0);\n}\n\n/*\n This method will display the characters for the\n word "Arduino" one after the other on the matrix. \n (you need at least 5x7 leds to see the whole chars)\n */\nvoid writeArduinoOnMatrix() {\n  /* here is the data for the characters */\n  byte a[5]={B01111110,B10001000,B10001000,B10001000,B01111110};\n  byte r[5]={B00010000,B00100000,B00100000,B00010000,B00111110};\n  byte d[5]={B11111110,B00010010,B00100010,B00100010,B00011100};\n  byte u[5]={B00111110,B00000100,B00000010,B00000010,B00111100};\n  byte i[5]={B00000000,B00000010,B10111110,B00100010,B00000000};\n  byte n[5]={B00011110,B00100000,B00100000,B00010000,B00111110};\n  byte o[5]={B00011100,B00100010,B00100010,B00100010,B00011100};\n\n  /* now display them one by one with a small delay */\n  lc.setRow(0,0,a[0]);\n  lc.setRow(0,1,a[1]);\n  lc.setRow(0,2,a[2]);\n  lc.setRow(0,3,a[3]);\n  lc.setRow(0,4,a[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,r[0]);\n  lc.setRow(0,1,r[1]);\n  lc.setRow(0,2,r[2]);\n  lc.setRow(0,3,r[3]);\n  lc.setRow(0,4,r[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,d[0]);\n  lc.setRow(0,1,d[1]);\n  lc.setRow(0,2,d[2]);\n  lc.setRow(0,3,d[3]);\n  lc.setRow(0,4,d[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,u[0]);\n  lc.setRow(0,1,u[1]);\n  lc.setRow(0,2,u[2]);\n  lc.setRow(0,3,u[3]);\n  lc.setRow(0,4,u[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,i[0]);\n  lc.setRow(0,1,i[1]);\n  lc.setRow(0,2,i[2]);\n  lc.setRow(0,3,i[3]);\n  lc.setRow(0,4,i[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,n[0]);\n  lc.setRow(0,1,n[1]);\n  lc.setRow(0,2,n[2]);\n  lc.setRow(0,3,n[3]);\n  lc.setRow(0,4,n[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,o[0]);\n  lc.setRow(0,1,o[1]);\n  lc.setRow(0,2,o[2]);\n  lc.setRow(0,3,o[3]);\n  lc.setRow(0,4,o[4]);\n  delay(delaytime1);\n  lc.setRow(0,0,0);\n  lc.setRow(0,1,0);\n  lc.setRow(0,2,0);\n  lc.setRow(0,3,0);\n  lc.setRow(0,4,0);\n  delay(delaytime1);\n}\n\n/*\n  This function lights up a some Leds in a row.\n The pattern will be repeated on every row.\n The pattern will blink along with the row-number.\n row number 4 (index==3) will blink 4 times etc.\n */\nvoid rows() {\n  for(int row=0;row<8;row++) {\n    delay(delaytime2);\n    lc.setRow(0,row,B10100000);\n    delay(delaytime2);\n    lc.setRow(0,row,(byte)0);\n    for(int i=0;i<row;i++) {\n      delay(delaytime2);\n      lc.setRow(0,row,B10100000);\n      delay(delaytime2);\n      lc.setRow(0,row,(byte)0);\n    }\n  }\n}\n\n/*\n  This function lights up a some Leds in a column.\n The pattern will be repeated on every column.\n The pattern will blink along with the column-number.\n column number 4 (index==3) will blink 4 times etc.\n */\nvoid columns() {\n  for(int col=0;col<8;col++) {\n    delay(delaytime2);\n    lc.setColumn(0,col,B10100000);\n    delay(delaytime2);\n    lc.setColumn(0,col,(byte)0);\n    for(int i=0;i<col;i++) {\n      delay(delaytime2);\n      lc.setColumn(0,col,B10100000);\n      delay(delaytime2);\n      lc.setColumn(0,col,(byte)0);\n    }\n  }\n}\n\n/* \n This function will light up every Led on the matrix.\n The led will blink along with the row-number.\n row number 4 (index==3) will blink 4 times etc.\n */\nvoid single() {\n  for(int row=0;row<8;row++) {\n    for(int col=0;col<8;col++) {\n      delay(delaytime2);\n      lc.setLed(0,row,col,true);\n      delay(delaytime2);\n      for(int i=0;i<col;i++) {\n        lc.setLed(0,row,col,false);\n        delay(delaytime2);\n        lc.setLed(0,row,col,true);\n        delay(delaytime2);\n      }\n    }\n  }\n}\n\nvoid loop() { \n  writeArduinoOnMatrix();\n  rows();\n  columns();\n  single();\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Connect your Arduino to your laptop using a USB-C cable and upload the code to the arduino."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Test!"}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const l={},o=i.createContext(l);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);