"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2520],{32343:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>a});var o=i(74848),r=i(28453);const t={title:"ESP WROOM 32",sidebar_position:1},s="Guide: How to Use the ESP-WROOM-32",l={id:"ESP-WROOM-32",title:"ESP WROOM 32",description:"Introduction",source:"@site/guide/0344-ESP-WROOM-32.md",sourceDirName:".",slug:"/ESP-WROOM-32",permalink:"/guide/ESP-WROOM-32",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"ESP WROOM 32",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"AM2320 Temperature and Humidity Sensor",permalink:"/guide/Temperature-Sensor"},next:{title:"HC-SR501 PIR Motion Sensor",permalink:"/guide/HC-SR501-and-ESP-WROOM-32"}},d={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Materials",id:"materials",level:2},{value:"Setting up the Development Environment",id:"setting-up-the-development-environment",level:2},{value:"Hardware Connections",id:"hardware-connections",level:2},{value:"Uploading the First Sketch",id:"uploading-the-first-sketch",level:2},{value:"Wi-Fi and Bluetooth Programming",id:"wi-fi-and-bluetooth-programming",level:2},{value:"GPIO and Sensor Integration",id:"gpio-and-sensor-integration",level:2},{value:"Advanced Functionality",id:"advanced-functionality",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"guide-how-to-use-the-esp-wroom-32",children:"Guide: How to Use the ESP-WROOM-32"}),"\n",(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsx)(n.p,{children:"The ESP-WROOM-32 is a versatile and powerful development board based on the ESP32 system-on-a-chip (SoC). It offers Wi-Fi and Bluetooth connectivity, a dual-core processor, ample I/O pins, and extensive development capabilities. This tutorial will guide you through the process of setting up and programming the ESP-WROOM-32 board."}),"\n",(0,o.jsx)("a",{href:"/img/docs/product_guide/0344-ESP-circuit.jpeg",children:(0,o.jsx)("img",{src:"/img/docs/product_guide/0344-ESP-WROOM-32-0001.jpg",alt:"Wiring Diagram",width:"40%",height:"100%"})}),"\n",(0,o.jsx)(n.h2,{id:"materials",children:"Materials"}),"\n",(0,o.jsx)(n.p,{children:"To follow this tutorial, you will need the following materials:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.canadarobotix.com/products/2594",children:"ESP WROOM 32"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.canadarobotix.com/products/223",children:"BreadBoard"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.canadarobotix.com/products/922",children:"Jumper wires"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.arduino.cc/en/software",children:"Arduino IDE"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"setting-up-the-development-environment",children:"Setting up the Development Environment"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Install the Arduino IDE: Visit the official Arduino website ",(0,o.jsx)(n.a,{href:"https://www.arduino.cc/",children:"arduino.cc"})," and download the latest version of the Arduino IDE for your operating system."]}),"\n",(0,o.jsxs)(n.li,{children:['Install ESP32 Board Support: Open the Arduino IDE, go to "File" -> "Preferences," and in the "Additional Boards Manager URLs" field, enter the following URL: ',(0,o.jsx)(n.code,{children:"https://dl.espressif.com/dl/package_esp32_index.json"})]}),"\n",(0,o.jsx)(n.li,{children:'Go to "Tools" -> "Board" -> "Boards Manager," search for "esp32," and install the "esp32" platform.'}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"hardware-connections",children:"Hardware Connections"}),"\n",(0,o.jsx)(n.p,{children:"Shown below is the wire connection diagram:"}),"\n",(0,o.jsx)("img",{src:"/img/docs/product_guide/0344-ESP-WROOM-32-0002.jpg",width:"%",height:"100%"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Connect the ESP-WROOM-32 module to your development board or a breadboard."}),"\n",(0,o.jsx)(n.li,{children:"Ensure that the usb cable is plugged into the ESP-WROOM-32 and you computer."}),"\n",(0,o.jsx)(n.li,{children:"Make the necessary connections for your project, such as GPIO pins, sensors, or actuators. Refer to the ESP-WROOM-32 datasheet for pin configurations."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"uploading-the-first-sketch",children:"Uploading the First Sketch"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Launch the Arduino IDE and create a new sketch."}),"\n",(0,o.jsx)(n.li,{children:'Go to "Tools" -> "Board" and select "ESP32 Dev Module" as the board.'}),"\n",(0,o.jsx)(n.li,{children:'Choose the appropriate port under "Tools" -> "Port."'}),"\n",(0,o.jsx)(n.li,{children:"Write your code using the Arduino programming language (C/C++)."}),"\n",(0,o.jsx)(n.li,{children:"Click on the upload button (right-arrow symbol) to compile and upload the sketch to the ESP-WROOM-32 module."}),"\n",(0,o.jsx)(n.li,{children:"On the bottom right corner there will be a progress bar showing you how far it is in the process of compiling the code, once it's done, hold the reset button on your ESP-WROOM-32, when you see a percentage showing up on the serial monitor you can let go."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"wi-fi-and-bluetooth-programming",children:"Wi-Fi and Bluetooth Programming"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"To utilize Wi-Fi and Bluetooth capabilities, include the necessary libraries:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"#include <WiFi.h>\r\n#include <BluetoothSerial.h>\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Establish a Wi-Fi connection by providing the SSID and password:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'const char* ssid = "YourWiFiSSID";\r\nconst char* password = "YourWiFiPassword";\r\nvoid setup() {\r\n    WiFi.begin(ssid, password);\r\n    while (WiFi.status() != WL_CONNECTED) {\r\n        delay(1000);\r\n    }\r\n    // Wi-Fi connected, do further operations.\r\n}\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"For Bluetooth, initialize the BluetoothSerial object and use the available methods:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'BluetoothSerial SerialBT;\r\nvoid setup() {\r\n    SerialBT.begin("ESP32 Bluetooth");\r\n    // Bluetooth operations here.\r\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"gpio-and-sensor-integration",children:"GPIO and Sensor Integration"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["To control GPIO pins, use the ",(0,o.jsx)(n.code,{children:"pinMode()"}),", ",(0,o.jsx)(n.code,{children:"digitalWrite()"}),", and ",(0,o.jsx)(n.code,{children:"digitalRead()"})," functions."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"const int ledPin = 2;\r\nvoid setup() {\r\n    pinMode(ledPin, OUTPUT);\r\n}\r\nvoid loop() {\r\n    digitalWrite(ledPin, HIGH);\r\n    delay(1000);\r\n    digitalWrite(ledPin, LOW);\r\n    delay(1000);\r\n}\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["To read analog sensors, use the ",(0,o.jsx)(n.code,{children:"analogRead()"})," function:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"const int sensorPin = 34;\r\nvoid setup() {\r\n    // No setup needed for analog read.\r\n}\r\nvoid loop() {\r\n    int sensorValue = analogRead(sensorPin);\r\n    // Process sensor value.\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"advanced-functionality",children:"Advanced Functionality"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Web Server: Learn how to create a web server on the ESP32 to serve web pages, control devices, and retrieve sensor data."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"OTA Updates: Explore Over-the-Air (OTA) updates to remotely update your ESP-WROOM-32 firmware without physically connecting to it."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:'Serial Monitor: Use the Serial Monitor in the Arduino IDE (navigate to "Tools" > "Serial Monitor") to debug and monitor your ESP-WROOM-32 board. Check for any error messages or unexpected output.'}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Check Connections: Double-check your hardware connections to ensure they are correct and properly seated."}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Internet Resources: Utilize online forums, tutorials, and documentation to troubleshoot specific issues or error messages you encounter during your project."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"In this tutorial, you learned the basics of setting up the development environment, making hardware connections, uploading sketches, and exploring Wi-Fi, Bluetooth, GPIO, and sensor integration with the ESP-WROOM-32 board. With this knowledge, you can start building your own IoT projects and leverage the extensive capabilities of the ESP32 microcontroller. Happy tinkering!"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var o=i(96540);const r={},t=o.createContext(r);function s(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);