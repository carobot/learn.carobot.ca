"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1791],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>k});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),s=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},u=function(t){var e=s(t.components);return n.createElement(p.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},c=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),m=s(a),c=r,k=m["".concat(p,".").concat(c)]||m[c]||d[c]||l;return a?n.createElement(k,i(i({ref:e},u),{},{components:a})):n.createElement(k,i({ref:e},u))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=c;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[m]="string"==typeof t?t:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},98470:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={title:"Literals",sidebar_position:3},i="How to Use Programming Literals in C",o={unversionedId:"intro-to-C/c03-literals",id:"intro-to-C/c03-literals",title:"Literals",description:"Literals are data used for representing fixed values or constant variables that cannot be changed or modified. They can be used directly in the code. For example:",source:"@site/docs/intro-to-C/c03-literals.md",sourceDirName:"intro-to-C",slug:"/intro-to-C/c03-literals",permalink:"/intro-to-C/c03-literals",draft:!1,editUrl:"https://github.com/carobot/learn.carobot.ca/tree/main/docs/intro-to-C/c03-literals.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Literals",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Variable Types",permalink:"/intro-to-C/c02-types"},next:{title:"Programming Operators",permalink:"/intro-to-C/c04-operator"}},p={},s=[{value:"Integers",id:"integers",level:2},{value:"Floating-Point Literals",id:"floating-point-literals",level:2},{value:"Character Literals",id:"character-literals",level:2},{value:"String Literals",id:"string-literals",level:2},{value:"What are Literals used for?",id:"what-are-literals-used-for",level:2},{value:"Escape Sequences",id:"escape-sequences",level:2}],u={toc:s},m="wrapper";function d(t){let{components:e,...a}=t;return(0,r.kt)(m,(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-use-programming-literals-in-c"},"How to Use Programming Literals in C"),(0,r.kt)("p",null,"Literals are data used for representing fixed values or constant variables that ",(0,r.kt)("strong",{parentName:"p"},"cannot")," be changed or modified. They can be used directly in the code. For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"const int = 10\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"The 10 represents the value 10, not a variable named 10.")),(0,r.kt)("h2",{id:"integers"},"Integers"),(0,r.kt)("p",null,"An integer is known as a numeric literal without a fraction or an exponent. In C programming there are three different types of integer literals:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Decimal",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Eg: 0, -10, 22"))),(0,r.kt)("li",{parentName:"ul"},"Octal (base 8 system)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Eg: 021, 077, 033"))),(0,r.kt)("li",{parentName:"ul"},"Hexadecimal (base 16) ",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Eg: 0x7f, 0x2a, 0x521")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example: change 78 to octal")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"Divide 78 by 8 until 0\n\n78 \xf7 8 = 9 R 6\n\n9 \xf7 8 = 1 R 1\n\n1 \xf7 8 = 0 R 1\n\nThe output will be 116\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"(Reminder: the remainder from the first division should be in the ones digit)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What the code should look like")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void setup(){\n    Serial.begin(9600);\n    Serial.println(78, OCT);\n}\nvoid loop(){\n\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Serial Monitor")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"116\n")),(0,r.kt)("h1",{id:"you-try"},"YOU TRY!"),(0,r.kt)("p",null,"In serial.print() enter a number then a comma and OCT. See what the output is in the serial monitor."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Eg: serial.print(78, OCT); should print out 116")),(0,r.kt)("h2",{id:"floating-point-literals"},"Floating-Point Literals"),(0,r.kt)("p",null,"A floating-point literal isa ",(0,r.kt)("strong",{parentName:"p"},"numeric literal that contains a decimal point"),". It is usually stored in either a decimal form or an exponent form."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Valid Entries"),(0,r.kt)("th",{parentName:"tr",align:null},"Invalid Entires"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-22.5"),(0,r.kt)("td",{parentName:"tr",align:null},"123E")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0.00034235"),(0,r.kt)("td",{parentName:"tr",align:null},"3554")))),(0,r.kt)("h2",{id:"character-literals"},"Character Literals"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Character literals are used to store ",(0,r.kt)("strong",{parentName:"li"},"a single character within a single quote (\u2018x\u2019)"),". To store multiple characters, you will use a character array instead.")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Valid Entries"),(0,r.kt)("th",{parentName:"tr",align:null},"Invalid Entries"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'a'"),(0,r.kt)("td",{parentName:"tr",align:null},"'Programming'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'F'"),(0,r.kt)("td",{parentName:"tr",align:null},"'Flower'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"'3'"),(0,r.kt)("td",{parentName:"tr",align:null},"'integer'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"','"),(0,r.kt)("td",{parentName:"tr",align:null},"'sign'")))),(0,r.kt)("h2",{id:"string-literals"},"String Literals"),(0,r.kt)("p",null,"String literals are similar to character literals, the difference is that string literals are capable of storing multiple ",(0,r.kt)("strong",{parentName:"p"},"characters enclosed in double quotation marks (\u201cbook\u201d)"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Valid Entries"),(0,r.kt)("th",{parentName:"tr",align:null},"Invalid Entries"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'"myAge"'),(0,r.kt)("td",{parentName:"tr",align:null},"'True'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'"remainingNumber"'),(0,r.kt)("td",{parentName:"tr",align:null},"'false'")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},'"percentYield"'),(0,r.kt)("td",{parentName:"tr",align:null},"'Keys'")))),(0,r.kt)("h2",{id:"what-are-literals-used-for"},"What are Literals used for?"),(0,r.kt)("p",null,"Using a literal, you can use the variable name rather than rewriting the value again and again."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example:")),(0,r.kt)("p",null,"Instead of using 11"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void setup(){\n    pinMode(11, OUTPUT);\n}\nvoid loop(){\n    digitalWrite(11, HIGH);\n    delay(1000);\n    digitalWrite(11, LOW);\n    delay(1000);\n}\n")),(0,r.kt)("p",null,"Use a declared integer (Eg. int LED = 11)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"int LED = 11; //<---Declare an integer\nvoid setup(){\n    pinMode(LED), OUTPUT);\n}\nvoid loop(){\n    digitalWrite(LED), HIGH);\n    delay(1000);\n    digitalWrite(LED, LOW);\n    delay(1000);\n}\n")),(0,r.kt)("h2",{id:"escape-sequences"},"Escape Sequences"),(0,r.kt)("p",null,"Some characters/shortcuts that we used cannot be typed in C programming. For example, ",(0,r.kt)("em",{parentName:"p"},"enter")," (for a new line), and ",(0,r.kt)("em",{parentName:"p"},"tab")," (for indent). Escape sequences are used to replace of these actions."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Escape Sequences"),(0,r.kt)("th",{parentName:"tr",align:null},"Characters"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\f"),(0,r.kt)("td",{parentName:"tr",align:null},"Form Feed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\n"),(0,r.kt)("td",{parentName:"tr",align:null},"Newline")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\r"),(0,r.kt)("td",{parentName:"tr",align:null},"Return")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\t"),(0,r.kt)("td",{parentName:"tr",align:null},"Horizontal Tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\v"),(0,r.kt)("td",{parentName:"tr",align:null},"Vertical Tab")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\"),(0,r.kt)("td",{parentName:"tr",align:null},"Backslash")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\\u2019"),(0,r.kt)("td",{parentName:"tr",align:null},"Single Quotation mark")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\\u201d"),(0,r.kt)("td",{parentName:"tr",align:null},"Double Quotation mark")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\?"),(0,r.kt)("td",{parentName:"tr",align:null},"Question mark")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\\0"),(0,r.kt)("td",{parentName:"tr",align:null},"Null Character")))))}d.isMDXComponent=!0}}]);