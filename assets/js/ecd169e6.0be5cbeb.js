"use strict";(self.webpackChunklearn_at_carobotix=self.webpackChunklearn_at_carobotix||[]).push([[7638],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>g});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var p=n.createContext({}),u=function(t){var e=n.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},m=function(t){var e=u(t.components);return n.createElement(p.Provider,{value:e},t.children)},s="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),s=u(a),k=r,g=s["".concat(p,".").concat(k)]||s[k]||d[k]||l;return a?n.createElement(g,i(i({ref:e},m),{},{components:a})):n.createElement(g,i({ref:e},m))}));function g(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[s]="string"==typeof t?t:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},26326:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var n=a(87462),r=(a(67294),a(3905));const l={title:"Chapter 4 - Programming Operator",sidebar_position:4},i=void 0,o={unversionedId:"intro-to-C/c04-operator",id:"intro-to-C/c04-operator",title:"Chapter 4 - Programming Operator",description:"Operators are symbols that carry out a specific function. For example '*' multiplies two numbers.",source:"@site/docs/intro-to-C/c04-operator.md",sourceDirName:"intro-to-C",slug:"/intro-to-C/c04-operator",permalink:"/intro-to-C/c04-operator",draft:!1,editUrl:"https://github.com/carobot/learn.carobot.ca/tree/main/docs/intro-to-C/c04-operator.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Chapter 4 - Programming Operator",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Chapter 3 - Literals",permalink:"/intro-to-C/c03-literals"},next:{title:"Chapter 5 - Constructs",permalink:"/intro-to-C/c05-constructs"}},p={},u=[{value:"Arithemtic Operators",id:"arithemtic-operators",level:2},{value:"Assignment Operators",id:"assignment-operators",level:2},{value:"Relational Operators",id:"relational-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Exercise",id:"exercise",level:2}],m={toc:u},s="wrapper";function d(t){let{components:e,...a}=t;return(0,r.kt)(s,(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Operators are symbols that carry out a specific function. For example '*' multiplies two numbers."),(0,r.kt)("h2",{id:"arithemtic-operators"},"Arithemtic Operators"),(0,r.kt)("p",null,"Arithemetic operators carry out mathematical operations like multiplications, division, addition and subtraction."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Signs"),(0,r.kt)("th",{parentName:"tr",align:null},"Purpose"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+"),(0,r.kt)("td",{parentName:"tr",align:null},"Addition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Subtraction")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*"),(0,r.kt)("td",{parentName:"tr",align:null},"Multiplication")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"/"),(0,r.kt)("td",{parentName:"tr",align:null},"Division")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Let\u2019s try using your Arduino board.")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In your Arduino IDE try dividing 2 integers whose answer is a decimal (Eg: 9/4, 8/7 and 10/56). What do you notice?"),(0,r.kt)("li",{parentName:"ul"},"Even though the answer is a floating-point number, it is changed to an integer because the 2 variables used are integers. "),(0,r.kt)("li",{parentName:"ul"},"Try it again using floating points instead.")),(0,r.kt)("h2",{id:"assignment-operators"},"Assignment Operators"),(0,r.kt)("p",null,"Assignment operators are used when assigning a value to a variable. The most commonly used assignment operator is the equal sign (=)."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"="),(0,r.kt)("td",{parentName:"tr",align:null},"a=b"),(0,r.kt)("td",{parentName:"tr",align:null},"a=b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+="),(0,r.kt)("td",{parentName:"tr",align:null},"a+=b"),(0,r.kt)("td",{parentName:"tr",align:null},"a = a+b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"-="),(0,r.kt)("td",{parentName:"tr",align:null},"a-=b"),(0,r.kt)("td",{parentName:"tr",align:null},"a = a-b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"*="),(0,r.kt)("td",{parentName:"tr",align:null},"a*=b"),(0,r.kt)("td",{parentName:"tr",align:null},"a = a*b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"/="),(0,r.kt)("td",{parentName:"tr",align:null},"a/=b"),(0,r.kt)("td",{parentName:"tr",align:null},"a = a/b")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"%="),(0,r.kt)("td",{parentName:"tr",align:null},"a%=b"),(0,r.kt)("td",{parentName:"tr",align:null},"a = a%b")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"The symbol '%' returns the remainder of an equation.\n\nExample:\nif a = 11 and b = 5\nThen a%=b will return 1 because 11/5 = 2 R 1\n")),(0,r.kt)("p",null,"Using your own Arduino board, ",(0,r.kt)("strong",{parentName:"p"},"try the following:")),(0,r.kt)("p",null,"Create different expressions using assignment operators."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"void setup(){\n    int a = 5;\n    int c = a;\n    //Instead of using variable names such as a, b and c,\n    //try using other names such as counter, num and temp\n    int num = 5;\n    int temp = num;\n}\n\nvoid loop(){\n\n}\n")),(0,r.kt)("h2",{id:"relational-operators"},"Relational Operators"),(0,r.kt)("p",null,"A relational operator verifies the relationship ",(0,r.kt)("strong",{parentName:"p"},"between two variables"),". If the statement is proven to be true then the output will be 1, if the statement is false then the output will be 0."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"=="),(0,r.kt)("td",{parentName:"tr",align:null},"Equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"22 == 4; false return = 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">"),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than"),(0,r.kt)("td",{parentName:"tr",align:null},"22 > 4; true return = 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<"),(0,r.kt)("td",{parentName:"tr",align:null},"Less than"),(0,r.kt)("td",{parentName:"tr",align:null},"22 < 4; false return = 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"!="),(0,r.kt)("td",{parentName:"tr",align:null},"Not equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"22 != 4; true return = 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">="),(0,r.kt)("td",{parentName:"tr",align:null},"Greater than or equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"22 >= 4; true return = 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<="),(0,r.kt)("td",{parentName:"tr",align:null},"Less than or equal to"),(0,r.kt)("td",{parentName:"tr",align:null},"22 <= 4; false return = 0")))),(0,r.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Operator"),(0,r.kt)("th",{parentName:"tr",align:null},"Meaning"),(0,r.kt)("th",{parentName:"tr",align:null},"Example (c=5, d=3)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"&&"),(0,r.kt)("td",{parentName:"tr",align:null},"Logical and true only if all operands are true."),(0,r.kt)("td",{parentName:"tr",align:null},"((c==5) && (d==3)); false return = 0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"|","|"),(0,r.kt)("td",{parentName:"tr",align:null},"Logical and only true if one operand is true"),(0,r.kt)("td",{parentName:"tr",align:null},"((c==5) ","|","|"," (d==3)); true return = 1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"!"),(0,r.kt)("td",{parentName:"tr",align:null},"Not Logical true only if the operand is 0"),(0,r.kt)("td",{parentName:"tr",align:null},"!(c==5); false return = 0")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"AND")," is a word used to add an additional comment or condition"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"OR")," is used to describe an alternative choice"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"A"),(0,r.kt)("th",{parentName:"tr",align:null},"B"),(0,r.kt)("th",{parentName:"tr",align:null},"AND(&&)"),(0,r.kt)("th",{parentName:"tr",align:null},"OR(","|","|",")"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"0"),(0,r.kt)("td",{parentName:"tr",align:null},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"1")))),(0,r.kt)("h2",{id:"exercise"},"Exercise"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Start by creating 3 variables with different values. (for more challenges try using three different types, int, float and double)."),(0,r.kt)("li",{parentName:"ol"},"Using ",(0,r.kt)("em",{parentName:"li"},"arithmetic operators")," create an expression where the output will be ",(0,r.kt)("strong",{parentName:"li"},"3"),". "),(0,r.kt)("li",{parentName:"ol"},"Then using any ",(0,r.kt)("em",{parentName:"li"},"relational operator")," create an expression where the output will be ",(0,r.kt)("strong",{parentName:"li"},"1"),". "),(0,r.kt)("li",{parentName:"ol"},"Use any ",(0,r.kt)("em",{parentName:"li"},"logical operator")," to return the value of ",(0,r.kt)("strong",{parentName:"li"},"0"),".")))}d.isMDXComponent=!0}}]);